package net.mg2013.collection{	import net.mg2013.display.MGCSSTextFieldCore;	import flash.events.Event;	public class MGTextFieldCollection	{		public static var __instance:MGTextFieldCollection;		private var __vector:Vector.<MGCSSTextFieldCore> = new Vector.<MGCSSTextFieldCore>()		private var __key:Vector.<String> = new Vector.<String>()		//////////-------------------------------------------------------------------------------------------------------------------------- CONSTRUCTOR		public static function getInstance():MGTextFieldCollection		{			if (__instance == null)			{				__instance = new MGTextFieldCollection();			}			return __instance;		}		//////////-------------------------------------------------------------------------------------------------------------------------- PUBLIC FUNCTIONS		public function addTextField(_field:MGCSSTextFieldCore):void		{			if (!hasField(_field))			{				//trace("ADDED FIELD: " + _field.id)				__vector.push(_field)				__key.push(_field.id)				if (_field.collectionType == MGTextFieldCollectionTypes.MONITOR_STAGE)					_field.addEventListener(Event.REMOVED_FROM_STAGE, fieldRemoved);			}			else			{				trace("FieldCollection allready has this Field: " + _field.id)					//throw new Error("FieldCollection has Field")			}		}		public function searchKey(_id:String):Vector.<MGCSSTextFieldCore>		{			var vector:Vector.<MGCSSTextFieldCore> = new Vector.<MGCSSTextFieldCore>()			var index:Number = __key.indexOf(_id)			while (index > 0)			{				vector.push(__vector[index])				index = __key.indexOf(_id, index + 1)			}			return vector		}		public function updateAll():void		{			var L:int = __vector.length			for (var i:int = 0; i < L; i++)			{				var field:MGCSSTextFieldCore = __vector[i]				field.update()			}		}		public function clearFromVector(field:MGCSSTextFieldCore):void		{			if (!hasField(field))				return;			var index:Number = __vector.indexOf(field)			var newVector:Vector.<MGCSSTextFieldCore> = __vector.slice(0, index).concat(__vector.slice(index + 1))			var newKey:Vector.<String> = __key.slice(0, index).concat(__key.slice(index + 1))			__vector = newVector			__key = newKey		}		//////////-------------------------------------------------------------------------------------------------------------------------- PROTECTED FUNCTIONS		protected function hasField(_field:MGCSSTextFieldCore):Boolean		{			return __vector.indexOf(_field) == -1 ? false : true		}		//////////-------------------------------------------------------------------------------------------------------------------------- EVENT FUNCTIONS		protected function fieldRemoved(event:Event):void		{			var field:MGCSSTextFieldCore = event.currentTarget as MGCSSTextFieldCore			clearFromVector(field)		}		//////////-------------------------------------------------------------------------------------------------------------------------- MOUSE FUNCTIONS		//////////-------------------------------------------------------------------------------------------------------------------------- PROTECTED GET & SET FUNCTIONS		//////////-------------------------------------------------------------------------------------------------------------------------- GET & SET FUNCTIONS	}}